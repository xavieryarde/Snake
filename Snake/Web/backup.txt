<!doctype html>
<html lang="en-us">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Snake</title>
    <style>
      body {
        font-family: arial;
        margin: 0;
        padding: 0;
        background: rgb(34, 139, 34);
      }

      .emscripten { 
        padding-right: 0; 
        margin-left: auto; 
        margin-right: auto; 
        display: block; 
      }
      
      div.emscripten { 
        text-align: center; 
      }
      
      canvas.emscripten { 
        border: 0px none; 
        background-color: black; 
        outline: none;
        max-width: 100%;
        max-height: 100vh;
      }

      #fullscreen-error {
        color: red;
        display: none;
        text-align: center;
        margin-top: 10px;
      }

      #fullscreen-controls {
        text-align: center;
        margin: 10px 0;
      }
    </style>
  </head>
  <body>
    <div id="fullscreen-controls">
      <button id="fullscreen-btn">Enter Fullscreen</button>
    </div>
    <div id="fullscreen-error">
      Fullscreen failed. Please check browser settings or try a different browser.
    </div>

    <div class="spinner" id='spinner'></div>
    <div class="emscripten" id="status">Downloading...</div>

    <div class="emscripten">
      <progress value="0" max="100" id="progress" hidden=1></progress>
    </div>

    <canvas class="emscripten" id="canvas" oncontextmenu="event.preventDefault()" tabindex=-1></canvas>

    <script type='text/javascript'>
      var statusElement = document.getElementById('status');
      var progressElement = document.getElementById('progress');
      var spinnerElement = document.getElementById('spinner');
      var fullscreenBtn = document.getElementById('fullscreen-btn');
      var fullscreenError = document.getElementById('fullscreen-error');
      var canvas = document.getElementById('canvas');

      var Module = {
        print: (function() {
          return (...args) => {
            var text = args.join(' ');
            console.log(text);
          };
        })(),
        canvas: canvas,
        setStatus: (text) => {
          Module.setStatus.last ??= { time: Date.now(), text: '' };
          if (text === Module.setStatus.last.text) return;
          var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
          var now = Date.now();
          if (m && now - Module.setStatus.last.time < 30) return;
          Module.setStatus.last.time = now;
          Module.setStatus.last.text = text;
          if (m) {
            text = m[1];
            progressElement.value = parseInt(m[2])*100;
            progressElement.max = parseInt(m[4])*100;
            progressElement.hidden = false;
            spinnerElement.hidden = false;
          } else {
            progressElement.value = null;
            progressElement.max = null;
            progressElement.hidden = true;
            if (!text) spinnerElement.style.display = 'none';
          }
          statusElement.innerHTML = text;
        },
        totalDependencies: 0,
        monitorRunDependencies: (left) => {
          this.totalDependencies = Math.max(this.totalDependencies, left);
          Module.setStatus(left ? 'Preparing... (' + (this.totalDependencies-left) + '/' + this.totalDependencies + ')' : 'All downloads complete.');
        }
      };

      // Enhanced Fullscreen Logic
      function requestFullscreen() {
        fullscreenError.style.display = 'none';
        
        // Check if fullscreen is supported
        if (!document.fullscreenEnabled) {
          fullscreenError.textContent = 'Fullscreen not supported by this browser.';
          fullscreenError.style.display = 'block';
          return;
        }

        // Ensure game is loaded before attempting fullscreen
        if (!Module.canvas || Module.totalDependencies > 0) {
          fullscreenError.textContent = 'Game is still loading. Please wait.';
          fullscreenError.style.display = 'block';
          return;
        }

        try {
          if (canvas.requestFullscreen) {
            canvas.requestFullscreen();
          } else if (canvas.mozRequestFullScreen) { // Firefox
            canvas.mozRequestFullScreen();
          } else if (canvas.webkitRequestFullscreen) { // Chrome/Safari
            canvas.webkitRequestFullscreen();
          } else if (canvas.msRequestFullscreen) { // IE/Edge
            canvas.msRequestFullscreen();
          } else {
            throw new Error('No fullscreen method available');
          }
        } catch (err) {
          console.error('Fullscreen request failed:', err);
          fullscreenError.textContent = 'Failed to enter fullscreen. ' + err.message;
          fullscreenError.style.display = 'block';
        }
      }

      // Add event listeners for fullscreen changes
      document.addEventListener('fullscreenchange', () => {
        if (document.fullscreenElement) {
          console.log('Entered fullscreen successfully');
        } else {
          console.log('Exited fullscreen');
        }
      });

      document.addEventListener('fullscreenerror', (event) => {
        console.error('Fullscreen error:', event);
        fullscreenError.textContent = 'Fullscreen failed. Check browser settings.';
        fullscreenError.style.display = 'block';
      });

      // Attach fullscreen request to button
      fullscreenBtn.addEventListener('click', requestFullscreen);

      // Original error handling
      Module.setStatus('Downloading...');
      window.onerror = (event) => {
        Module.setStatus('Exception thrown, see JavaScript console');
        spinnerElement.style.display = 'none';
        Module.setStatus = (text) => {
          if (text) console.error('[post-exception status] ' + text);
        };
      };
    </script>
    <script async type="text/javascript" src="index.js"></script>
  </body>
</html>